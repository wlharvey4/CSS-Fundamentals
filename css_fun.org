# -*- mode:org; fill-column:79; -*-
#+TITLE:CSS Fundamentals
#+AUTHOR:Tyler Clark
#+DATE:<2019-04-18 Thu 11:06>

Can you center an HTML element? Do you know how the box model works?
CSS is a fundamental language imperative to working with websites. It
controls all the visual aspects of a site, from colors to layouts.

Even the most experienced developer can learn something new when it
comes to using and understanding how the browser interprets CSS. In
this course, we will slowly style a website according to a mocked
image. Let’s walk through:
- specificity
- fonts
- the box model
- margins
- padding
- positioning
- and much more!

* Introduction
:PROPERTIES:
:unnumbered: t
:END:
#+texinfo: @iftex
Can you center an HTML element? Do you know how the box model works?
CSS is a fundamental language imperative to working with websites. It
controls all the visual aspects of a site, from colors to layouts.

Even the most experienced developer can learn something new when it
comes to using and understanding how the browser interprets CSS. In
this course, we will slowly style a website according to a mocked
image. Let’s walk through:
- specificity
- fonts
- the box model
- margins
- padding
- positioning
- and much more!

#+texinfo: @end iftex
{{{heading(Source and Code)}}}

{{{noindent}}}Based upon [[https://egghead.io/courses/css-fundamentals][CSS Fundamentals]], presented by {{{author}}}.

{{{noindent}}}Code can be found at https://github.com/twclark0/css-fundamentals.git

* Set CSS Properties and Values---Syntax
#+CINDEX:syntax
The CSS syntax writes somewhat similar to JavaScript objects. It is
important to understand where to properly set *properties*,
*selectors*, and *values* within your CSS.  /In this lesson we’ll talk
about this syntax and work an example./

** CSS Components
Instructor: 00:00 CSS is a language that controls how documents are
presented on the Web to users. This means it controls how text,
images, and other elements lay out on a page, how they respond to
different devices, and so much more.

#+CINDEX:components, 2 main
00:14 We can write a quick example of CSS by styling some specific
content to appear as the color =red= on the page.

CSS has two main {{{dfn(components)}}}.

1. Selector and corresponding block
2. Declaration: property and corresponding value; must end with a
   semicolon.

#+caption[CSS Components]:CSS Component: Selector, Declaration Block, Declaration (property-value)
#+name:css-components
#+begin_src css
  h1 {			(ref:selector-block)
      color: red;		(ref:property-value)
  }
#+end_src

{{{heading(Selector and Declaration Block)}}}

#+CINDEX:selector, component
#+CINDEX:block, component
#+CINDEX:block, declaration
First, the selector and its corresponding block.  This first statement
({{{samp(h1)}}}) is called a {{{dfn([[(selector-block)][selector]])}}}.  This is how we tell
the browser which elements of HTML we want to apply the defined styles
to.

#+CINDEX:declaration block, CSS
#+CINDEX:CSS declaration block
00:35 Everything defined inside of these curly braces will apply to
this selector only. These are also called {{{dfn([[(selector-block)][CSS declaration
blocks]])}}}.  Inside of these blocks are the {{{dfn([[(property-value)][CSS
declarations]])}}}.

{{{heading(Declarations---Properties and Values)}}}

#+CINDEX:property, component
00:48 On the left-hand side of the colon, these are called [[(property-value)][properties]].
{{{dfn(Properties)}}} are the feature of the page we want to style.
In our case, we want to change the color feature of our ~h1~ selector
to be the color =red=.

01:01 On the right side of our colon, these are called
{{{dfn(values)}}}.  Each property has a specific set of valid values
that can be chosen to implement on a website.  This is the how we want
to change the defined feature.

01:15 We end each CSS declaration with a semicolon.  This is required,
or the browser will not render the style correctly.

* Use Selectors to Style HTML Elements
CSS gives us the ability to work with many different types of
selectors to target and style HTML.  In this lesson we will understand
how to use classes, ids, elements, attributes, and the universal
selector.

** Targeting Elements Using Selectors
#+CINDEX:target html elements
Instructor: 00:00 There are many different ways you can target HTML to
style.  Here in the browser, I'm running some basic unstyled HTML,
which is also shown here.

#+caption:{{{code(home.html)}}} Mostly Unstyled Code
#+name:unstyled-home.html
#+begin_src html -n :noweb no-export :tangle home.html
<<home.html>>
#+end_src

#+begin_comment
NOTE: If the following long code source listing is given a 'caption',
it will be wrapped in a '@float', and will appear on one page only,
truncated at the last line on that page.  By placing the above code
with a 'noweb' reference to the long code listing, a caption can be
generated and placed into the Listings section at the end of the
document, and all of the code will appear on multiple pages.  This is
because only @float's can be placed in lists.
#+end_comment

#+name:home.html
#+begin_src html -n
  <!DOCTYPE html>
  <html lang="eng">

  <head>
      <title>Tyler's Portfolio</title>
      <link rel="stylesheet" type="text/css" href="style.css">
      <link
        href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,500,700"
        rel="stylesheet">
      <style>
          .container {
              max-width: 1200px;
              margin: auto;
          }

          body {
              background: hsl(0, 0%, 13%);
              font-family: 'Open Sans', sans-serif;
              color: hsl(0, 0%, 90%);
          }
      </style>
  </head>

  <body>
      <div class='container'>
          <header>
              <nav>
                  <div class=' headerContainer '>
                      <a href='# ' class='logo '>
                          Tyler.
                      </a>
                      <ul class='header--ul '>
                          <li>
                              <a href='#'>Home</a>
                          </li>
                          <li>
                              <a href='#'>About</a>
                          </li>
                          <li>
                              <a href='#'>Experience</a>
                          </li>
                          <li>
                              <a href='#'>Portfolio</a>
                          </li>
                          <li>
                              <a href='#'>Services</a>
                          </li>
                          <li>
                              <a href='#'>Blog</a>
                          </li>
                          <li>
                              <a href='#'>Contact</a>
                          </li>
                      </ul>
                  </div>
              </nav>
              <div>
                  <div>
                      <div>
                          <div>
                              <div>
                                  <h5>Hello, I am</h5>
                                  <h1>Tyler Clark</h1>
                                  <p>UX Designer / Frontend Developer</p>
                                  <div>
                                      <a href="#">
                                          <i></i>
                                      </a>
                                      <a href="#">
                                          <i></i>
                                      </a>
                                      <a href="#">
                                          <i></i>
                                      </a>
                                      <a href="#">
                                          <i></i>
                                      </a>
                                      <a href="#">
                                          <i></i>
                                      </a>
                                      <a href="#">
                                          <i></i>
                                      </a>
                                  </div>
                                  <a>View My Portfolio
                                      <i></i>
                                  </a>
                              </div>
                          </div>
                          <div>
                              <img src="img/portfolio-pic-01.png" alt="" />
                          </div>
                      </div>
                  </div>
              </div>
              <div>
                  <div>
                      <span></span>
                      <nav>
                          <ul>
                              <li>
                                  <a>Home</a>
                              </li>
                              <li>
                                  <a>About</a>
                              </li>
                              <li>
                                  <a>Experience</a>
                              </li>
                              <li>
                                  <a>Portfolio</a>
                              </li>
                              <li>
                                  <a>Services</a>
                              </li>
                              <li>
                                  <a>Blog</a>
                              </li>
                              <li>
                                  <a>Contact</a>
                              </li>
                          </ul>
                      </nav>
                      <div>
                          <div>
                              <a href="#">
                                  <i></i>
                              </a>
                              <a href="#">
                                  <i></i>
                              </a>
                              <a href="#">
                                  <i></i>
                              </a>
                          </div>
                      </div>
                  </div>
              </div>
              <a id="close_sidebar" href="#"></a>
          </header>
          <section>
              <div>
                  <div>
                      <div>
                          <h3>My Services</h3>
                      </div>
                  </div>
                  <div>
                      <div>
                          <div>
                              <div>
                                  <i></i>
                              </div>
                              <div>Web Development</div>
                              <p>Lorem ipsum dolor sit amet, consectetur adipiscing
                                elit, sed do eiusmod tempor incididunt ut
                                labore et dolore magna aliqua.</p>
                          </div>
                      </div>
                      <div>
                          <div>
                              <div>
                                  <i></i>
                              </div>
                              <div>Web Design</div>
                              <p>Lorem ipsum dolor sit amet, consectetur adipiscing
                                elit, sed do eiusmod tempor incididunt ut
                                labore et dolore magna aliqua.</p>
                          </div>
                      </div>
                      <div>
                          <div>
                              <div>
                                  <i></i>
                              </div>
                              <div>Social Media</div>
                              <p>Lorem ipsum dolor sit amet, consectetur adipiscing
                                elit, sed do eiusmod tempor incididunt ut
                                labore et dolore magna aliqua.</p>
                          </div>
                      </div>
                      <div>
                          <div>
                              <div>
                                  <i></i>
                              </div>
                              <div>Photography</div>
                              <p>Lorem ipsum dolor sit amet, consectetur adipiscing
                                elit, sed do eiusmod tempor incididunt ut
                                labore et dolore magna aliqua.</p>
                          </div>
                      </div>
                      <div>
                          <div>
                              <div>
                                  <i></i>
                              </div>
                              <div>Graphic Design</div>
                              <p>Lorem ipsum dolor sit amet, consectetur adipiscing
                                elit, sed do eiusmod tempor incididunt ut
                                labore et dolore magna aliqua.</p>
                          </div>
                      </div>
                      <div>
                          <div>
                              <div>
                                  <i></i>
                              </div>
                              <div>Content Writing</div>
                              <p>Lorem ipsum dolor sit amet, consectetur adipiscing
                                elit, sed do eiusmod tempor incididunt ut
                                labore et dolore magna aliqua.</p>
                          </div>
                      </div>
                  </div>
              </div>
          </section>
          <footer>
              <div>
                  <div>
                      <div>
                          <div>
                              <span>&copy; My portfolio</span>
                          </div>
                      </div>
                  </div>
              </div>
          </footer>
      </div>
  </body>

  </html>
#+end_src

#+begin_comment
The following script creates the 'img/' directory and downloads the two files
that are inside from the author's Github repository.  It runs when this source
file is exported.
#+end_comment

#+begin_src sh :exports results :results silent
[ -d img ] || mkdir -v img
cd img && \
curl -LJO https://github.com/twclark0/css-fundamentals/blob/master/img/portfolio-pic-01.png && \
curl -LJO https://github.com/twclark0/css-fundamentals/blob/master/img/fog.jpg
#+end_src

{{{heading(Use CSS Selectors to Target Elements)}}}

Let's use CSS to target and style this ~h1~ tag that holds my name.

{{{subheading(Type Selector)}}}

#+CINDEX:type selector
00:17 The first way we can target and style the ~h1~ is by using a
[[(type-selector)][*type selector*]].  {{{dfn(Type selectors)}}} match the provided node.
All ~h1~ elements within the scope of this CSS will have a blue color.

#+begin_comment
This is the first 'style.css' file and is tangled into its own file upon an
export.  None of the other 'style.css' files in this source code are tangled by
default.  They must be explicitly tangled by changing the ':tangle no' into
':tangle style.css', followed by 'C-u C-c C-v t' and will overwrite this file.
#+end_comment

#+caption:The {{{file(style.css)}}} File
#+name:style.css
#+begin_src css -r :tangle style.css
h1 {			(ref:type-selector)
 color: blue;
}
#+end_src

{{{subheading(universal selector)}}}

#+CINDEX:universal selector
00:31 We could affect not only this one ~h1~, but every element by
using the {{{dfn(universal selector)}}}, =*=.  This accomplishes our
goal, but it's not very efficient, because the browser will have to
apply it to many nodes.

#+begin_src css :tangle no
,* {
 color: blue;
}

#+end_src

00:43 Instead, let's go ahead and add a =class= attribute to our ~h1~,
and we'll give it a string of {{{samp(name)}}}.

#+begin_src html
<h5>Hello,I am</h5>
<h1 class='name'>Tyler Clark</h1>		(ref:class-attribute)
<p>UX Designer / Fronted Developer</p>
#+end_src

{{{subheading(Class Selector)}}}

#+CINDEX:class selector
Instead of our styles, we'll change this universal selector to =.name=
and refresh.  As you can see, now we're only targeting our one ~h1~.

This is the third type of selector, the {{{dfn([[(class-selector)][class selector]])}}}.
This will match in style and every element that has the [[(class-attribute)][=class=]]
attribute of =name=.

#+begin_src css -r :tangle no
.name {				(ref:class-selector)
 color: blue;
}
#+end_src

{{{subheading(Id Selector)}}}

#+CINDEX:id selector
01:08 When we are targeting classes, we use the dot in front of the
providing class name.  There is also the {{{dfn([[(id-selector)][=id= selector]])}}},
which is also an attribute called [[(id-element)][=id= on the HTML element]].

#+begin_src html
<div>
  <h5>Hello, I am</h5>
  <h1 id='name'>Tyler Clark</h1>		(ref:id-element)
#+end_src

However, we don't target IDs with the dot, but with the =#=.  Our
element is still blue.

#+begin_src css -r :tangle no
#name {				(ref:id-selector)
 color: blue;
}
#+end_src

{{{subheading(Attribute Selector)}}}

#+CINDEX:attribute selector
Let's go ahead and remove this =id= attribute and replace it with
~data-name="name"~.

#+begin_src html
<div>
  <h5>Hello, I am</h5>
  <h1 data-name="name">Tyler Clark</h1>
  <p>UX Designer / Fronted Developer</p>
#+end_src

01:36 Instead of our CSS, we'll do ~[data-name]="name"~.  If we save
this and refresh, we'll see that we're still blue.

#+begin_src css -r :tangle no
[data-name='name'] {		(ref:attribute-selector)
 color: blue;
}
#+end_src

While there are specific methods for targeting =class= and =id=
element attributes, other attributes provided to HTML elements can be
targeted as well by copying the attribute and placing it within square
brackets. This is called using the {{{dfn([[(attribute-selector)][attribute selector]])}}}.

#+begin_src emacs-lisp :exports results
(copy-file "css_fun.org" "css_fun-bak.org" t t t t)
(with-current-buffer (find-file "css_fun-bak.org")
  (progn
    (org-babel-tangle)
    (delete-file "css_fun-bak.org")
    (kill-buffer "css_fun-bak.org")))
#+end_src

* Utilize Selector Specificity to Control Applied Styles
#+CINDEX:specificity, core concept
When selectors conflict, the browser needs to know which property /
value combination to paint.  *Specificity* is one of the core concepts
of CSS and is important to understand in order to implement
deterministic styles.  Let's look at the specificity rules and learn
the power of each selector.

** Specificity Rules
 00:00 We can target all of our navigation ~li~'s by simply doing ~li
 color blue~.  As you can see when we refresh, we get them to all be
 blue.

 #+begin_src css :tangle no
   li {
    color: blue;
   }
 #+end_src

{{{heading(Handling Conflicts)}}}

 #+CINDEX:conflict, styles
We can add a conflicting style to one ~li~, the home ~li~, by giving it a
class of =home=.

#+begin_src html
<div>
  <ul>
    <li class='home'>
#+end_src

Now we can target that class by ~.home~ and give it the =color: red=.
Now when we save and refresh our home ~li~ is now red while all the rest
of them are blue.

#+begin_src css :tangle no
/*
element = 0,0,1
classes = 0,1,0
*/

li {
 color: blue;
}
.home {
 color: red;
}
#+end_src

{{{heading(Resolving Multiple Selectors Targeting Same Element)}}}

#+CINDEX:cascade
#+CINDEX:specificity values
#+CINDEX:specificity, element selectors
#+CINDEX:specificity, class selectors
00:25 When multiple selectors are targeting the same element, the
browser needs to know which one to apply.  This is where the cascade
and specificity come into play.

{{{subheading(Class Selectors Beat Element Selectors)}}}

#+CINDEX:element selectors
#+CINDEX:class selectors
*Element selectors* have a specificity value of =0,0,1=, while
*classes* have =0,1,0=.  Because the classes value is larger than the
element, the =home= class is going to overrule the ~li~.  That's why
it's red.

{{{subheading(Id Selectors Beat Class and Element Selectors)}}}

#+CINDEX:id selectors
00:51 Now let's give our home ~li~ an id of =home=.

#+begin_src html
<div>
  <ul>
    <li class='home' id='home'>
#+end_src

We'll target that by =#home=, give it a color of =gray=.  Save and
refresh and we see that now our red goes to gray.

#+begin_src css :tangle no
/*
element = 0,0,1
classes = 0,1,0
ids = 1,0,0
*/

li {
 color: blue;
}
.home {
 color: red;
}
#home {
 color: gray;
}
#+end_src

#+CINDEX:specificity value, id
#+CINDEX:id specificity value
This is because *id*'s have an even higher specificity of element and
classes of =1,0,0=.  This is going to overrule the other two.

01:13 Even if we added more targeted element selectors to the color
red, for example, ~div ul li~, the id still wins.  This is because the
id of =1,0,0= is larger than an element with three elements.  As you
can see, =0,0,3= is still smaller.

01:32 Even when we combine elements with classes to target our ~li~,
when we save and refresh, the id still wins.  This would be like having
a =0,1,3=, which is still smaller than the =1,0,0= of the id.

#+begin_src css :tangle no
div ul li {
 color: blue;
}
.home {
 color: red;
}
#home {
 color: gray;
#+end_src

{{{subheading(Inline Styles Beat Ids, Classes, Elements)}}}

01:47 It's also good to know that *inline style*'s will beat out id's,
classes, and elements.  Give it a color of purple and refresh. This
makes our home ~li~ purple.

#+begin_src html
<ul>
  <li class='home' id='home' style='color: purple'>
    <a>Home</a>
#+end_src

#+CINDEX:@code{!important} tag
Then something that even beats inline styles is using the
*=!important=* tag.  If we go back and put it onto our element
selector and refresh, we're back to blue.  That's because an
=!important= rules all in this case.

#+begin_src css :tangle no
div ul li {
 color: blue !important;
}
.home {
 color: red;
}
#home {
 color: gray;
#+end_src

* Style Elements Using the Cascade
CSS is an acronym for cascading style sheets.  It can be frustrating when
working with CSS and elements are not styling correctly because there is a
conflicting style lower on the cascade.  Let's look at how the browser uses the
cascade to determine which styles to implement.

** Source Order Matters
00:00 Let's go ahead and style all of our =li=s to be the color =red=.  We'll
do that by doing ~li color red~.  Save and refresh.  Everything's red.

#+begin_src css
li {
 color: red;
}
#+end_src

Great.  Let's copy this and do the same thing, =li=, but give it a =color:
blue= and save.  We'll see that everything turns to blue even though we still
have the =color: red= above it.

#+begin_src css
li {
  color: red;
}

li {
  color: blue;
}
#+end_src

#+CINDEX:Cascading Style Sheets (CSS)
#+CINDEX:source order
00:22 CSS is an acronym for Cascading Style Sheets, which points to the fact
that source order, or how we define our styles, actually affects what gets
displayed in the browser.  *When styles conflict like this, the browser will
look at specificity, then to the source order that we define our styles.*

00:40 *Since these two =li=s are the same specificity, the lower =li= color
value is applied, as we see.*  This is true for any type of selector.  Let's
give one =li= a class of =home=.

#+begin_src html
<ul>
  <li class='home'>
#+end_src

Now we'll change this top =li= to a color of =red=, which will change the one
to red.

00:57 Then, if we add this second one of color blue, we'll see that blue still
wins.  It doesn't matter what selector you use.  *The bottom of the cascade
will always win.*

#+begin_src css
.home {
  color: red;
}

.home {
  color: blue;
}
#+end_src

01:07 Let's go ahead and add another class to our =li=.  We'll say =home--two=.
We'll change this second class to =home--two=.  Save and refresh.  You can see
that it still stays blue.  It doesn't matter how many classes we have on this
=li=.  *When two selectors collide, it's going to take whatever class is
lower.*

#+begin_src html
<ul>
  <li class='home home--two'>
#+end_src

#+begin_src css
.home {
  color: red;
}

.home--two {
  color: blue;
}
#+end_src

01:27 Even we switch up the order -- we do =home--two= and then =home= -- we
see that blue still wins because =home--two= lives lower on the cascade.  *It
doesn't matter the order of the classes here.  What matters is the source
order.*

#+begin_src html
<ul>
  <li class='home-two home'>
#+end_src

* Apply CSS Styles with Inheritance
The cascade is frequently conflated with the concept of inheritance.  These two
topics are related; however you should try to understand each individually.
Let's apply color styles to a =<ul>= and see how it affects our child =<li>=s.
As well as use the =inherit= and =initial property= values.

** Inheritance vs Cascade
#+CINDEX:inheritance, dfn
00:00 in {{{file(home.html)}}}, we have the basic HTML to make a navigation.
Inside of our {{{file(style.css)}}}, if we did =ul color= as =blue= and
refresh, we see that we get this color style applied to all of our =<li>=s
inside the =<ul>=.  This is called {{{dfn(inheritance)}}}, meaning that /some
styles are carried to the child elements within the HTML tree/.

#+begin_src css
ul {
  color: blue;
}
#+end_src

#+CINDEX:inheritance properties
00:20 Most of the accepted inherited properties involve text, such as =color=,
=font=, =font-family=, =font-size=, and so on, while properties that do not are
those like =padding=, =margin=, =height=, and =width=.

{{{heading(Controlling Inheritance)}}}

00:33 We can also control inheritance. For example, if we did =li= with a color
of =red=.

#+begin_src css
ul {
  color: blue;
}

li {
  color: red;
}
#+end_src

Then, inside of home, we gave this home =li= a class of =home=.

#+begin_src html
<ul>
  <li class='home'>
#+end_src

#+CINDEX:@code{inherit} property value
Back inside of our style, if we targeted this =home= class of =color: inherit=
and refresh the page, we see that all the =li=s are now =red= except for the
=home= item.

#+begin_src css
ul {
  color: blue;
}

li {
  color: red;
}

.home {
  color: inherit;
}
#+end_src

00:54 The =li=s are =red= because we're *targeting* them in our css.  However,
we tell the =home li= to apply the {{{dfn(inherited)}}} color, which in our
case *is the color being passed to it from its parent =ul= element.*

{{{heading(Using =initial= Property Value)}}}

#+CINDEX:@code{initial} property value
We can also use the =initial= property value, which, when we refresh the page,
changes the text back to =black=.

#+begin_src css
ul {
 color: blue;
}

li {
 color: red;
}

.home {
 color: initial;
}
#+end_src

01:14 {{{dfn(initial)}}} *sets the property value to be the same as the value
set for that element in the browser's default style sheet*. For our text, this
is =black=.  =initial= is not supported in Internet Explorer, but is in all of the
other browsers.

* Debug CSS with Chrome Devtools
CSS can be hard to understand.  It can be frustrating when you expect the
element to be styled one way and it just doesn’t.  Luckily our browsers like
Chrome, come with devtools we can use to see which styles are overriding and
which have issues.

{{{heading(Overview of the Tools)}}}

00:00 With our =li= styled =red=, we can see some of the tools that Chrome
gives us by right-clicking on the element that we want to inspect and click on
the =inspect= option.  When we use that inspect option, Chrome will take us to
where the selected HTML lives inside of this tree.

{{{heading(Removing Styles)}}}

00:18 Within the =styles= tab, we can clearly see our =li= styled =red=.  This
box is editable, which means we can remove this style by clicking on the
=check= and add other properties such as =font-size=, which will automatically
apply to our HTML.

{{{heading(Hierarchy is Important)}}}

00:38 The hierarchy order here is important.  We see that =li= receives other
styles from Chrome, such as =text align=.  It also gets these bullet point-type
styles also from Chrome, but it's being inherited from the =ul=.

{{{heading(Source of Styles)}}}

00:53 When we refresh our custom styles, our font size will go away.  What's
also nice is Chrome will tell us where it got this style from.  We can see that
it came from our {{{file(style.css)}}} and that's where it says it comes from.
If we click on our {{{file(style.css)}}} in the dev tools, it takes us to that
file.

{{{heading(Adding a Class)}}}

01:10 We can easily add a class to our a tag here by clicking on this =.cls=,
which will open up an input box.  We can type in the name of the class that we
want to add to our a tag, press the plus sign here, and it will give us a
custom block where we can type in styles onto our newly created class.

{{{heading(State)}}}

01:29 We can see if our =a= tag has any =hover= state by clicking on the =HOV=
here and clicking on the =hover=.  We can also activate the =active=, =focus=,
and =visited= pseudo class as well.  These tabs here are showing us where our
=a= tag lives inside the HTML tree.  See our HTML, then we have a couple =div=s,
our =ul=, our =li=, and then our =a= tag.

{{{heading(Box Model and Final State of Styles)}}}

01:52 Finally, this bottom right box here is showing us two things.  The box
model of the selected element and all of the final state styles of our element.
This box model is telling us this element does not have any margins, borders,
paddings around the element, just the text.

02:11 We can manually add spacing by clicking on any of these dashes here and
typing.  If we click on padding and typed in 10, our element will receive a
=padding-top= of 10 pixels.

02:22 As mentioned, if you ever find yourself lost in a sea of CSS styles, this
will show the current applied state to the element.  This includes our specific
coloring of =red= and all of the default styles our browser is applying to it.

* Understand CSS Layout with the Box Model
* Control HTML Elements with Different CSS Units
* Manipulate Colors with CSS
* Add Backgrounds to HTML Elements
* Hide and Show HTML Elements with CSS
* Modify Font Style in CSS
* Positioning HTML Elements using CSS
* Customize CSS Selectors with Pseudo Classes
* Use CSS Media Queries to Dynamically Apply Styles
* Style a Logo and Navigation on a Website with CSS
* Program Listings
:PROPERTIES:
:unnumbered: t
:END:
#+texinfo: @listoffloats Listing
* Main Index
:PROPERTIES:
:index: cp
:unnumbered: t
:END:

* Export Settings                                                  :noexport:
#+texinfo_filename:css_fun.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+subtitle:
#+subauthor:
#+texinfo_dir_category:WebDev
#+texinfo_dir_title:CSS Fundamentals
#+texinfo_dir_desc:Slowly style a website according to a mocked image.
#+texinfo_printed_title:CSS Fundamentals

* Macro Definitions                                                :noexport:
#+macro:dfn @@texinfo:@dfn{@@$1@@texinfo:}@@
#+macro:samp @@texinfo:@samp{@@$1@@texinfo:}@@
#+macro:code @@texinfo:@code{@@$1@@texinfo:}@@
#+macro:heading @@texinfo:@heading@@ $1
#+macro:subheading @@texinfo:@subheading@@ $1
#+macro:noindent @@texinfo:@noindent @@
#+macro:file @@texinfo:@file{@@$1@@texinfo:}@@

* Open in Chrome                                                   :noexport:
[[shell:open -a 'Google Chrome' home.html][Open home.html in Chrome]]
